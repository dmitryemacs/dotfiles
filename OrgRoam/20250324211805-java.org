:PROPERTIES:
:ID:       c30c4d4e-f43e-41e6-9f31-a595e016549b
:END:
#+title: Java

* Java ОКР <2024-04-09 Tue>
** Мониторы
Каждый объект в Java имеет ассоциированный с ним монитор. Монитор представляет своего рода инструмент для управления доступа к объекту. Когда выполнение кода доходит до оператора synchronized, монитор объекта блокируется, и на время его блокировки монопольный доступ к блоку кода имеет только один поток, который и произвел блокировку. После окончания работы блока кода, монитор объекта освобождается и становится доступным для других потоков.

#+BEGIN_SRC java :results output
  public class Main {
	  // Общий ресурс для синхронизации
	  public static Integer commonRes = 0;

	  public static void main(String[] args) {
		  for (int i = 0; i < 10; i++) {
			  int threadNumber = i; // Сохраняем значение i для текущего потока
			  newThread(() -> {
					  synchronized (commonRes) { // Синхронизация на ресурсе commonRes
						  commonRes = 1;
                          for (int j = 0; j < 5; j++) {
							  System.out.println(Thread.currentThread().getName() + " " + commonRes);
						  }
					  }
			  }, "Thread0" + threadNumber).start();
		  }
	  }
  }
#+END_SRC

** Семафоры и мьютексы

У семафора есть 4 метода
Чтобы создать у нас есть 2 конструктора
(int prmits) (int permits, boolean fair)
Методы:
1) void acquire() throws IE - забирает 1 разрешение уменьшает счетчик на 1
2) void acquire(int permits) может вызвать IE
3) void release() - освобожает 1 разрешение увеличивает счетчик на 1
4) void release(int permits) без throws
 
Мьютексы

#+BEGIN_SRC java :results output
  public class Main {
  	  public static void main(String[] args) {
  		  // Методы мьютексов
  		  acuire(mutex);
  		  release(mutex);
  		  tryAcquire(mutex);
  		  /*
  		  Свойства:
  		  1) Запоминание владельца
  		  2) Рекурсивность
  		  3) Наследование приоритета
  		  ,*/
  		  
  	  }
  }
#+END_SRC

* Обмен данными между потоками

Класс Exchanger - обмен
Сам exchanger типизированный <T> int нельзя Integer можно потому что он является классом обёртки

У Exchanger есть 2 метода:
1) T exchange(T data)
2) T exchange(T data, long timeOut, TimeUnit timeUnit) TimeUnit это generic enum перечисление

Запускается поток, потом поток замирает и ожадает загрузки данных в метод exchange() далее 2 поток запускается и забирает данные из метода exchange()
Этот метод нужно обязательно обработать в try-catche

#+BEGIN_SRC java :results output
  public class Main {
      public static void main(String[] args) {
          System.out.print("Hello");
      }
  }
#+END_SRC

Class Phazer
Предоставляет возможность поэтапного выполенения кода
Конструкторы:
1) Phazer()
2) Phazer(int), где int - participants (Количество участников)
3) Phazer(Phazer)
4) Phazer(Phazer, int)

Методы:
1) int register() - подпись на фазы (возвращается номер текущей фазы)
2) int arrive() - оповещает о конце (возвращает номер этой фазы)
3) int arriveAndAwaitAdvance() - окончание фазы и ожидание всех, кто ещё не выполнил
4) int arriveAndDeregister() - возвращает номер текущей фазы или -1 б если фазы закончились
5) int getPhaze() - получит текущую фазу

* Блокировка с помощью ReadAndLock
void lock() - ожидает, пока не получит разблокировку
void unlock() - освободить 
boolean tryLock() - попытка блокировки без ожидания
Condition newCondition() - возвращает объект - условие condition которые связан с текущей блокировкой

Находится в java.util.concurrent.locks как и ReentrantLock
Синтаксис:
Reentrant lock = new ReentrantLock();
lock.lock();

Методы условия блокировки
await();
signal();
signalAll()
