:PROPERTIES:
:ID:       00ddd8f8-ca34-4ed4-941c-4de6d8ea90b6
:END:
#+title: Database

* Лекция 1
** Введение
ИС - это программно апаратный комплекс обеспечивающий выполнение следующиех функций:

1) Надёжное хранение информации в памяти компьютера
2) Выполение специфических преобразований информации и вычислений
3) Представление пользователям удобного интерфейса
Примеры ИС:
- Система бронирования
- Банковская система
- Покупка билетов
- Заказ такси

Банк данных - это разновидность ИС в которой реализованы функции центролизованного хранения и накопления обрабатываемой информации.
Организованной в одну или несколько БД.

** Компоненты банка данных
1) База данных - это совокупность специальным образом организованных данных хранящихся в памяти вычислительной системы и отражающих
состояние объектов и их взаимосвязей в расматриваемой предметной области.
2) Система управления БД и СУБД 
3) Приложение
4) Словарь данных
5) Администратор БД
6) Вычислительная система
7) Обслуживающий персонал 

** Модель представления данных
Модель представления данных - это логическая структура хранимой в БД информации
Основные модели данных:
- Иерархическая или древовидная
- Сетевая
- Реляционная
- Постреалиционная
- Многомерная
- Объектно-ориентированная

СУБД(Система управления базами данных) - это комплекс языковых и программных средств предназначенных для создания, ведения и совместного 
использования БД многими пользователями.

Приложения - это программа или комплекс программ обеспечивающих автоматизацию обработки информации для прикладной задачи

Словарь данных - это подсистема банка данных предназначеная для централизованного хранения информации о структурах данных взаимосвязях файлов
о типах файлов, данных, о форматах их представления, пренадлежнасти данных пользователям, кодам защиты и разграничения доступа

Администратор БД - это лицо или группа лиц отвечающая за выбор требований к БД её проектирование создание эффективное использование и 
сопровождение.

Вычислительная система - это совокупность взаимосвязанных и согласованно действующих ЭВМ. процессоров и других устройств обеспечивающих 
автоматизацию процессов приема обработки и выдачи информации потребителю.

Обслуживающий персонал - это лицо или группа лиц которая выполняет функции поддержания работы в технических и программных средств.

Виды банков данных:
1) По архитектуре вычеслительной среды (централизованные и распределённые)
2) По языку общение пользователя с БД (открытые и закрытые)
- Открытые с базовам языком
- Закрытые с собственных языком
  
* Лекция 2
** Основные функции и типовая организация современных СУБД
Основные функции СУБД:
1) Упровление данными во внешней памяти
2) Упровление буферами оперативной памяти
   В развитых СУБД поддерживается собственный набор буферов оперативной памяти, с собстной дисцеплиной
   замены буферов.
3) Управление транзакциями
   *Транзация* - это последовательность операций над БД рассматриваемых СУБД как единое целое.
   Либо транзация успешно выполняется и СУБД фиксирует изменения в БД произведенная этой транзакцией во внешней
   памяти, либо ни одно из этих изменений никак не отражается на состоянии БД.
   *План* (cпособ) выполнения набора транзакций называется сериальным, если рузультат совместного выполнения транзаций
   эквивалентен рузультату некоторого последовательного их выполнения.
   *Сериализация транзаций* - это механизм выполения транзакций по некоторому сериальному плану.
4) Журнализация изменений БД
   Под надежность хранения понимается то что СУБД должна быть в состоянии восстановить последнее согласованное
   состояние БД после любого аппаратного или программного или программного сбоя (мягкие и жесткие сбои).
   *Журнал* - это особая часть БД, недоступная пользователям СУБД и поддерживаемая с особой тщательностью, в
   которую поступают записи обо всех изменениях основной части БД.
5) Поддержка языков БД
   Стандартным языком наиболее распраненные реляционных СУБД является язык SQL (Structured Query Language)
   Язык базы данных:
   - DDL(Data Definition Languege) - язык определения структуры БД
   - DML(Data Monipulation Languege) - Набор операций для манипулирования информацией.
   
** Типовая организация современной СУБД
- *Ядро СУБД* (Data Base Engine)
  Отвечает за упровление данными во внешней памяти, упровление буферами оперативной памяти, управление транзацкциями
  и журнализацию
  Соответственно, можно выделить такие компоненты ядра как
  - менеджер данных;
  - менеджер буферов;
  - менеджер транзакций;
  - менеджер журнала;
- *Компилятор языка*
  Основной функцией компилятора языка БД является компиляция операторов языка БД в некоторую выполняемую программу.
  Результатом компиляции является выполняемая программа, представляемая в некоторых системах в машинных кодах,
  но более часто в выполняемом внутреннем машинно-независимом коде. 
- *Подсистема поддержки времени выполнения*
  В последнем случае реальное выполнение оператора производится с привлечением подсистемы поддержки времени выполнения,
  пред-ставляющей собой интерпретатор
  этого внутреннего языка.
- *Набор утилит*
  Наконец, в отдельные утилиты БД обычно выделяют такие
  процедуры, которые слишком накладно выполнять с использованием языка БД, например, загрузка и выгрузка БД,
  сбор статистики, глобальная проверка целостно-сти БД и т.д. Утилиты программируются с использованием интерфейса ядра СУБД, а иногда даже с проникновением внутрь ядра.
  
** Ранние подходы к оранизации СУБД
Хранимые в базе данные имеют определенную логическую структуру, т. е. описываются некоторой моделью представления данных, поддерживаемой СУБД.
К числу классических относятся следующие модели данных:
• иерархическая;
• сетевая;
• реляционная.
Кроме того, в последнее время появились и стали больше
использоваться в практике следующие модели данных: пост-реляционная, многомерная, объектно-ориентированная

*Ранние системы*
- Основанные на инветировананных списках;
- Иерархические системы;
- сетевые системы.

*Основанные на инветировананных списках.*
Данный вид СУБД отличается *преимуществами:* простотой организации БД и наличием весьма удобных языков манипулирования данными.
Однако такие СУБД обладают рядом *недостатков* на количество файлов для хранения данных, количество связей между ними, длину записи и количество ее полей.
К числу наиболее известных и типичных представителей таких систем относятся Datacom/DB компании Applied Data Research, Inc. (ADR), ориентированная на
использование на машинах основного класса фирмы IBM, и Adabas компании Software AG.

Структуры данных: Для БД, организованнаой с помощью инвертированных списков, характерно то, что хранимые таблицы и пути доступа к ним видны пользователям.
При этом:
1.  строки таблиц упорядочены системой в некоторой физической последова-тельности
2.  физическая упорядоченность строк всех таблиц может определяться и для всей БД
3.  для каждой таблицы можно определить произвольное число ключей поиска, для которых строятся индексы

*Манипулирование данными*
Поддерживаются два класса операторов:
1) операторы, устанавливающие адрес записи;
2) операторы над адресуемыми записями.

*Ограничения целостности*
Общие правила определения целостности БД отсутствуют.
В некоторых системах поддерживаются ограничения уникальности значений некоторых полей, но в основном все возлагается на прикладную программу.

*Иерархические системы (древовидный):*
Типичным представителем иерархической системы является Information Management System (IMS) фирмы ІВМ.
pp*Структуры данных:*
Иерархическая БД состоит из упорядоченного набора деревьев, точнее, из упорядоченного набора нескольких экземпляров одного типа дерева.
Тип дерева состоит из одного «корневого» типа записи и упорядоченного набора из нуля или более типов поддеревьев (каждое из кото-рых
является некоторым типом дерева). Тип дерева в целом представляет собой иерархически организованный набор типов записи.

Между деревьями существуют связи , такие, что родитель может иметь несколько потомков, но один потомок только одиного родителя.

*Манипулирование данными:*
Примерами типичных операторов манипулирования иерархически организо-ванными данными могут быть следующие:
- найти указанное дерево БД (например, отдел 310);
- перейти от одного дерева к другому;
- перейти от одной записи к другой внутри дерева (например, от отдела - к пер-вому сотруднику);
- перейти от одной записи к другой в порядке обхода иерархии;
- вставить новую запись в указанную позицию;
- удалить текущую запись.

*Ограничения целостности:*
- Автоматически поддерживается целостность ссылок между предками и потомками.
- Основное правило: никакой потомок не может существовать без своего родителя. Заметим, что аналогичное
- поддержание целостности по ссылкам между записями, не входящими в одну иерархию, не поддерживается.

Преимущества  Недостатки
Эффективное использование памяти компьютера  Громоздкость для обработки информа-ции с достаточно сложными связями
Высокие временные показатели выпол-нения операций над данными  Неуниверсальность
Простота  Доступ к данным производится только через корневое отношение
Преимущества Недостатки
Эффективное использование памяти компьютера
Высокие временные показатели выполнения операций над данными
Простота
Громоздкость для обработки информации
с достаточно сложными связями
Неуниверсальность
Доступ к данным производится только через корневое отношение

* Лекция 3 Модели БД
** Сетевая модель
Сетевая модель является расширением иерархической модели однако в сетевой структуре потомок может иметь любое число предков.
Монипулирование данными:
Создание и изменение записей:
  - Уничтожение записей
  - Поиск конкретной записи
  - Переход от предка к потомку и от потомка к предку
  - Влючить в связь или исключить из связи

Ограничение целостности:
- Поддержание целостности не требуется

Преимущества сетевой модели:
- Возможность эффективной реализации по показателям затрат памяти оперативности (оперативная память)
- Большие возможности по созданию и моделированию различных связей между сущностями реального мира
Недостатки сетевой модели:
- Высокая сложность
- Жёсткость схемы данных
- Сложность для понимания и выполнения обработки информации обычным пользователям

** Реалиционная модель
Общие понятия реалиционного подхода к организации БД
Реалиционная модель данных представляет собой набор отношений изменяющихся во времени.
Основные понятия
[[file:/home/dima/Docs/table.jpeg][Отношения]]

Пример реалиционной модели
[[file:/home/dima/Docs/table2.jpeg][Схема отношений]]
                    Cхема отношений
								   
Сущность это объект любой природы данные о котором хранятся в БД.
Данные о сущностях хранятся в отношениях
Отношения представляют собой думерную таблицу в которой соблюдаются следующие свойства
Свойства отношений:
1) В отношении нет одинаковых кортежей
2) Кортежи не упорядочены
3) Атирибуты не упорядочены
4) Все значения аттрибутов атомарны
*Атрибут* - это свойство характеризующее сущность. Атрибут в схеме это столбец таблицы
*Кортеж* - это строка таблицы
Домен это множество всех возможных значений определенного атрибута
*Схема отношений* - список имен атрибутов
Множество кортежей отношений называют содержимым отношения
*Степень* отношения это количество столбцов таблицы
*Мощность* отношения это количество строк таблицы

** Ключи в реалиционной модели
*Первичный ключ* - это атрибут отношения однозначно индетифицирующий каждый из его кортежей.
Ключ может быть состовным (состоять из нескольких атрибутов).
Если выбранный первичный ключ состоит из минимально необходимого набора атрибутов то говорят, что он является не избыточным.
*Внешний ключ* - это ключ используемый для установления связей между отношениями. Содержит значения первичного ключа другой таблицы.
*Индекс* - это средство ускорения операций поиска записей в таблице и других операций использующих поиск. Таблицу для которой используется индекс называют индексированной.
*Ссылочная целосность* - это необходимое качество реалиционной БД. Заключается в отсутствии в любом ее отношении внешних ключей ссылающихся на несуществоющие кортежи

Пример ссылочной целостности:
[[file:/home/dima/Docs/table3.jpeg][Ссылочная целостность]]

Обязательным хотя и недостаточным условием сохранением ссылочной целостности БД является поддержка транзацкий.
Транзацкции не позволят нарушить ссыллочную целостность. Возможно поддержание ссылочной целостности БД с использованием механизма тригеров
Констистентность данных - это согласованность данных друг с другом, целостность данных а также внутреняя непротиворечивость, то есть множество всех условий,
налагающихся на данные.

* Структура внешней памяти методы организации индексов
Реляционные СУБД обладают рядом особенностей, влияющих на организацию внешней памяти:
Наличие двух уровней системы:
- уровня непосредственного упровления данными во внешней памяти
- языкового уровня
При такой организации подсистема нижнего уровня должна поддерживать во внешней памяти набор базовых структур, конкретная интерпретация которых входит в число функций подсистемы верхнего уровня.
** Реляционные СУБД обладают рядом особенностей, влияющих на организацию внешней памяти:
1) Поддержание отношений-каталогов.
Информация, связанная с именованием объектов базы данных и их конкретными свойствами (например, структура ключа индекса), поддерживается подсистемой языкового уровня. С точки зрения структур внешней памяти отношение-каталог ничем не отличается от обычного отношения базы данных.

2) Регулярность структур данных.
Поскольку основным объектом реляционной модели данных является плоская таблица, главный набор объектов внешней памяти может иметь очень простую регулярную структуру.

3)Поддержка индексов.
Необходимо обеспечить возможность эффективного выполнения операторов языкового уровня как над одним отношением (простые селекция и проекция), так и над несколькими отношениями (например, соединение нескольких отношений). Для этого во внешней памяти должны поддерживаться дополнительные «управляющие» структуры - индексы.

4) Поддержка избыточности хранения данных
Обычно реализуется в виде журнала изменений базы данных.

** Разновидности объектов во внешней памяти базы данных
1) Строки отношений
   Основная часть базы данных, большей частью непосредственно видимая пользователям
2) Управляющие структуры
   индексы, создаваемые по инициативе пользователя или верхнего уровня для повышения эффективности выполнения запросов и обычно автоматически поддерживаемые нижним уровнем системы
3) Журнальная информация
   поддерживаемая для удовлетворения потребности в надежном хранении данных
4) Служебная информация
   поддерживаемая для удовлетворения внутренних потребностей нижнего уровня системы (например, информация о свободной памяти)

** Физическое хранение отношений
Существуют два принципиальных подхода к физическому хранению отношений:
*** Покортежное хранение отношений
- кортеж является единицей физического хранения
- обеспечивает быстрый доступ к целому кортежу
- во внешней памяти дублируются общие значения разных кортежей одного отношения
могут потребоваться лишние обмены с внешней памятью, если нужна часть кортежа
*** Хранение отношений по столбцам
- Eдиницей хранения является столбец отношения с исключенными дубликатами
- тратится меньше внешней памяти, поскольку дубликаты значений не хранятся
- за один обмен с внешней памятью считывается больше полезной информации
- возможность использования значений столбца отношения для оптимизации выполнения операций соединения
- требуются существенные дополнительные действия для сборки целого кортежа (или его части)
** Индексы
- _Назначение_: обеспечение эффективного прямого доступа к кортежу отношения по ключу. Обычно индекс определяется для одного отношения, и ключом является значение атрибута.
- Если ключом индекса является возможный ключ отношения, то индекс должен обладать свойством уникальности, т.е. не содержать дубликатов ключа.
- На практике ситуация выглядит обычно противоположно: при объявлении первичного ключа отношения автоматически заводится уникальный индекс, а единственным способом объявления возможного ключа, отличного от первичного, является явное создание уникального индекса. Это связано с тем, что для проверки сохранения свойства уникальности возможного ключа так или иначе требуется индексная поддержка.

Поскольку при выполнении многих операций языкового уровня требуется сортировка отношений в соответствии со значениями некоторых атрибутов, полезным свойством индекса является обеспечение последовательного просмотра кортежей отношения в диапазоне значений ключа в порядке возрастания или убывания значений ключа.

Одним из способов оптимизации выполнения эквисоединения отношений (наиболее распространенная из числа дорогостоящих операций) является организация так называемых мультииндексов для нескольких отношений, обладающих общими атрибутами. Любой из этих атрибутов (или их набор) может выступать в качестве ключа мультииндекса. Значению ключа сопоставляется набор кортежей всех связанных мультииндексом отношений, значения выделенных атрибутов которых совпадают со значением ключа.

** Методы организации индексов:
*** В-деревья
- Наиболее популярным подходом к организации индексов в БД является использование техники B-деревьев. 
- С точки зрения внешнего логического представления B-дерево - это сбалансированное сильно ветвистое дерево во внешней памяти. Сбалансированность означает, что длина пути от корня дерева к любому его листу одна и та же. Ветвистость дерева - это свойство каждого узла дерева ссылаться но большое число узлов-потомков. 
- С точки зрения физической организации B-дерево представляется как мультисписочная структура страниц внешней памяти, т.е. каждому узлу дерева соответствует блок внешней памяти (страница). Внутренние и листовые страницы обычно имеют разную структуру.
*** Хэширование
- Альтернативным и все более популярным подходом к организации индексов является использование техники хэширования. 
- _Идея_: применение к значению ключа некоторой функции свертки (хэш-функции), вырабатывающей значение меньшего размера. Свертка значения ключа затем используется для доступа к записи. Свертка ключа используется как адрес в таблице, содержащей ключи и записи. 
_Требование к хэш-функции_: равномерное распределение значение свертки. При возникновении коллизий (одна и та же свертка для нескольких значений ключа) образуются цепочки переполнения. Главным ограничением этого метода является фиксированный размер таблицы. Если таблица заполнена слишком сильно или переполнена, то доступ к записи за одно обращение к таблице будет потерян. Расширение таблицы требует ее полной переделки на основе новой хэш-функции (со значением свертки большего размера).

В случае баз данных такие действия являются абсолютно неприемлемыми. Поэтому обычно вводят промежуточные таблицы-справочники, содержащие значения ключей и адреса записей, а сами записи хранятся отдельно. Тогда при переполнении справочника требуется только его переделка, что вызывает меньше накладных расходов.

Чтобы избежать потребности в полной переделки справочников, при их организации часто используют технику B-деревьев с расщеплениями и слияниями. Хэш-функция при этом меняется динамически, в зависимости от глубины B-дерева. Путем дополнительных технических ухищрений удается добиться сохранения порядка записей в соответствии со значениями ключа. В целом методы B-деревьев и хэширования все более сближаются.

** Журнальная информация
_*Журнал*_ обычно представляет собой чисто последовательный файл с записями переменного размера, которые можно просматривать в прямом или обратном порядке. 

Обмены производятся стандартными порциями (страницами) с использованием буфера оперативной памяти. В грамотно организованных системах структура журнальных записей известна только компонентам СУБД, ответственным за журнализацию и восстановление. 

Поскольку содержимое журнала является критичным при восстановлении базы данных после сбоев, к ведению файла журнала предъявляются особые требования по части надежности. В частности, обычно стремятся поддерживать две идентичные копии журнала на разных устройствах внешней памяти.
** Служебная информация
Для корректной работы подсистемы управления данными во внешней памяти необходимо поддерживать информацию, которая используется только этой подсистемой и не видна подсистеме языкового уровня. Набор структур служебной информации зависит от общей организации системы, но обычно требуется поддержание следующих служебных данных:
1) Внутренние каталоги, описывающие физические свойства объектов базы данных (число атрибутов отношения, их размер, описание индексов и т.д.)
2) Описатели свободной и занятой памяти в страницах отношения. Такая информация требуется для нахождения свободного места при занесении кортежа. Отдельно приходится решать задачу поиска свободного места в случаях некластеризованных и кластеризованных отношений
3) Связывание страниц одного отношения.

* Управление транзациями. Методы реализации транзаций
Под транзакцией понимается неделимая с точки зрения воздействия на БД последовательность операторов манипулирования данными (чтения, удаления, вставки, модификации) такая, что либо результаты всех операторов, входящих в транзакцию, отображаются в БД, либо воздействие всех этих операторов полностью отсутствует.

Лозунг транзакции – «Все или ничего»: при завершении транзакции оператором COMMIT результаты гарантированно фиксируются во внешней памяти (смысл слова commit – «зафиксировать» результаты транзакции); при завершении транзакции оператором ROLLBACK результаты гарантированно отсутствуют во внешней памяти (смысл слова rollback - ликвидировать результаты транзакции).

** Различаются два вида ограничений целостности
*** немедленно проверяемые
К немедленно проверяемым ограничениям целостности относятся такие ограничения, проверку которых бессмысленно или даже невозможно откладывать. Немедленно проверяемые ограничения целостности соответствуют уровню отдельных операторов языкового уровня СУБД. При их нарушениях не производится откат транзакции, а лишь отвергается соответствующий оператор.
Примером ограничения, проверку которого откладывать бессмысленно, являются ограничения домена (возраст сотрудника не может превышать 150 лет).
Более сложным ограничением, проверку которого невозможно отложить, является следующее: зарплата сотрудника не может быть увеличена за одну операцию более, чем на 100,000 рублей.
*** откладываемые
Откладываемые ограничения целостности - это ограничения на базу данных, а не на какие-либо отдельные операции. По умолчанию такие ограничения проверяются при конце транзакции, и их нарушение вызывает автоматическую замену оператора COMMIT на оператор ROLLBACK.
Однако в некоторых системах поддерживается специальный оператор насильственной проверки ограничений целостности внутри транзакции. Если после выполнения такого оператора обнаруживается, что условия целостности не выполнены, пользователь может сам выполнить оператор ROLLBACK или постараться устранить причины нецелостного состояния базы данных внутри транзакции (видимо, это осмысленно только при использовании интерактивного режима работы).

** Изолированность пользователей
Во многопользовательских системах с одной базой данных одновременно могут работать несколько пользователей или прикладных программ. Предельной задачей системы является обеспечение изолированности пользователей, т.е. создание достоверной и надежной иллюзии того, что каждый из пользователей работает с БД в одиночку.

В связи со свойством сохранения целостности БД транзакции являются подходящими единицами изолированности пользователей. Действительно, если с каждым сеансом работы с базой данных ассоциируется транзакция, то каждый пользователь начинает работу с согласованным состоянием базы данных, т.е. с таким состоянием, в котором база данных могла бы находиться, даже если бы пользователь работал с ней в одиночку.

** Уровни изолированности транзакций
При соблюдении обязательного требования поддержания целостности базы данных возможны следующие уровни изолированности транзакций:
*** Отсутствие потерянных изменений
Потерянное изменение — при одновременном изменении одного блока данных разными транзакциями теряются все изменения, кроме последнего. Отсутствие потерянных изменений является минимальным требованием к СУБД по части синхронизации параллельно выполняемых транзакций.

Рассмотрим следующий сценарий совместного выполнения двух транзакций. Транзакция 1 изменяет объект базы данных A. До завершения транзакции 1 транзакция 2 также изменяет объект A. Транзакция 2 завершается оператором ROLLBACK (например, по причине нарушения ограничений целостности). Тогда при повторном чтении объекта A транзакция 1 не видит изменений этого объекта, произведенных ранее.
*** Отсутствие чтения «грязных данных»
«Грязное чтение» —  чтение данных, добавленных или изменённых транзакцией, которая впоследствии не подтвердится (откатится).
Например. Транзакция 1 изменяет объект базы данных A. Параллельно с этим транзакция 2 читает объект A. Поскольку операция изменения еще не завершена, транзакция 2 видит несогласованные «грязные» данные. Это не соответствует требованию изолированности пользователей (каждый пользователь начинает свою транзакцию при согласованном состоянии базы данных и в праве ожидать видеть согласованные данные).
*** Отсутствие неповторяющихся чтений
Неповторяющееся чтение —  при повторном чтении в рамках одной транзакции ранее прочитанные данные оказываются изменёнными.

Пример. Транзакция 1 читает объект базы данных A. До завершения транзакции 1 транзакция 2 изменяет объект A и успешно завершается оператором COMMIT. Транзакция 1 повторно читает объект A и видит его измененное состояние. Чтобы избежать неповторяющихся чтений, до завершения транзакции 1 никакая другая транзакция не должна изменять объект A.
*** Отсутствие фантомного чтения
Фантомное чтение — одна транзакция в ходе своего выполнения несколько раз выбирает множество строк по одним и тем же критериям. Другая транзакция в интервалах между этими выборками добавляет строки или изменяет столбцы некоторых строк, используемых в критериях выборки первой транзакции, и успешно заканчивается. В результате получится, что одни и те же выборки в первой транзакции дают разные множества строк.

** Сериализация транзакций

Понятно, что для того, чтобы добиться изолированности транзакций, в СУБД должны использоваться какие-либо методы регулирования совместного выполнения транзакций.

План (способ) выполнения набора транзакций называется сериальным, если результат совместного выполнения транзакций эквивалентен результату некоторого последовательного выполнения этих же транзакций.

*Сериализация транзакций* - это механизм их выполнения по некоторому сериальному плану. Обеспечение такого механизма является основной функцией компонента СУБД, ответственного за управление транзакциями. Система, в которой поддерживается сериализация транзакций обеспечивает реальную изолированность пользователей.

** Между транзакциями могут существовать следующие виды конфликтов:
*** W-W
  - транзакция 2 пытается изменять объект, измененный не закончившейся транзакцией 1
*** R-W
  - транзакция 2 пытается изменять объект, прочитанный не закончившейся транзакцией 1
*** W-R
  - транзакция 2 пытается читать объект, измененный не закончившейся транзакцией 1

** Методы сериализации транзакций:
Суть обоих подходов состоит в обнаружении конфликтов транзакций и их устранении.
Для каждого из подходов имеются две разновидности  - пессимистическая и оптимистическая.
При применении пессимистических методов, ориентированных на ситуации, когда конфликты возникают часто, конфликты распознаются и разрешаются немедленно при их возникновении.
Оптимистические методы основываются на том, что результаты всех операций модификации базы данных сохраняются в рабочей памяти транзакций. Реальная модификация базы данных производится только на стадии фиксации транзакции. Тогда же проверяется, не возникают ли конфликты с другими транзакциями.
*** Синхронизационные захваты
Наиболее распространенным в централизованных СУБД является подход, основанный на соблюдении двухфазного протокола синхронизационных захватов объектов БД. В общих чертах протокол состоит в том, что перед выполнением любой операции в транзакции T над объектом базы данных r от имени транзакции T запрашивается синхронизационный захват объекта r в соответствующем режиме (в зависимости от вида операции).

Захваты объектов несколькими транзакциями по чтению совместимы, т.е. нескольким транзакциям допускается читать один и тот же объект, захват объекта одной транзакцией по чтению не совместим с захватом другой транзакцией того же объекта по записи, и захваты одного объекта разными транзакциями по записи не совместимы.
Для обеспечения сериализации транзакций (третьего уровня изолированности) синхронизационные захваты объектов, произведенные по инициативе транзакции, можно снимать только при ее завершении. Это требование порождает двухфазный протокол синхронизационных захватов - 2PL.

В соответствии с этим протоколом выполнение транзакции разбивается на две фазы:
1) первая фаза транзакции - накопление захватов;
2) вторая фаза (фиксация или откат) - освобождение захватов.
Достаточно легко убедиться, что при соблюдении двухфазного протокола синхронизационных захватов действительно обеспечивается сериализация транзакций на третьем уровне изолированности.

Основными режимами синхронизационных захватов являются:
**** совместный режим - S (Shared)
Означающий разделяемый захват объекта и требуемый для выполнения операции чтения объекта
**** монопольный режим - X (eXclusive)
Означающий монопольный захват объекта и требуемый для выполнения операций занесения, удаления и модификации
*** Временные метки




